with Ada.Strings.Bounded;

with DCF77_Types;
use  DCF77_Types;
with DCF77_Low_Level;
use  DCF77_Low_Level;

package DCF77_Display is

	package SB is new Ada.Strings.Bounded.Generic_Bounded_Length(Max => 17);

	subtype Brightness is U8;
	subtype Pos_X is U8 range 0 .. 127;
	subtype Pos_Y is U8 range 0 .. 63;

	type Font is (Large, Small);

	type Display_Item is record
		X:   Pos_X;
		Y:   Pos_Y;
		Msg: SB.Bounded_String;
		F:   Font    := Small;
		-- underline bottom/top/left/right TODO IMPLEMENT IN DRIVER!
		ULB: Boolean := False;
		ULT: Boolean := False;
		ULL: Boolean := False;
		ULR: Boolean := False;
	end record;

	type Items is array (Natural range <>) of Display_Item;

	type Disp is tagged limited private;

	Display_Brightness_Perc_100: constant Brightness := 16#00#;
	Display_Brightness_Perc_090: constant Brightness := 16#06#;
	Display_Brightness_Perc_080: constant Brightness := 16#0c#;
	Display_Brightness_Perc_070: constant Brightness := 16#12#;
	Display_Brightness_Perc_060: constant Brightness := 16#18#;
	Display_Brightness_Perc_050: constant Brightness := 16#1e#;
	Display_Brightness_Perc_040: constant Brightness := 16#24#;
	Display_Brightness_Perc_030: constant Brightness := 16#2a#;
	Display_Brightness_Perc_000: constant Brightness := 16#ff#;

	procedure Init(Ctx: in out Disp; LL: in DCF77_Low_Level.LLP);
	procedure Update(Ctx: in out Disp; It: in Items;
		New_Brightness: in Brightness := Display_Brightness_Perc_100);

private

	-- Translated from from https://github.com/adafruit/
	-- Adafruit-Graphic-VFD-Display-Library/blob/master/Adafruit_GP9002.h
	GP9002_Displaysoff        : constant U8 := 16#00#;
	GP9002_Display1on         : constant U8 := 16#01#;
	GP9002_Display2on         : constant U8 := 16#02#;
	GP9002_Addrincr           : constant U8 := 16#04#;
	GP9002_Addrheld           : constant U8 := 16#05#;
	GP9002_Clearscreen        : constant U8 := 16#06#;
	GP9002_Controlpower       : constant U8 := 16#07#;
	GP9002_Datawrite          : constant U8 := 16#08#;
	GP9002_Dataread           : constant U8 := 16#09#;
	GP9002_Loweraddr1         : constant U8 := 16#0A#;
	GP9002_Higheraddr1        : constant U8 := 16#0B#;
	GP9002_Loweraddr2         : constant U8 := 16#0C#;
	GP9002_Higheraddr2        : constant U8 := 16#0D#;
	GP9002_Addrl              : constant U8 := 16#0E#;
	GP9002_Addrh              : constant U8 := 16#0F#;
	GP9002_Or                 : constant U8 := 16#10#;
	GP9002_Xor                : constant U8 := 16#11#;
	GP9002_And                : constant U8 := 16#12#;
	-- 3-5-10. Luminance Adjustment
	GP9002_Bright             : constant U8 := 16#13#;
	GP9002_Display            : constant U8 := 16#14#;
	GP9002_Display_Monochrome : constant U8 := 16#10#;
	GP9002_Display_Grayscale  : constant U8 := 16#14#;
	GP9002_Intmode            : constant U8 := 16#15#;
	GP9002_Drawchar           : constant U8 := 16#20#;
	GP9002_Charram            : constant U8 := 16#21#;
	GP9002_Charsize           : constant U8 := 16#22#;
	GP9002_Charbright         : constant U8 := 16#24#;

	type Disp is tagged limited record
		LL:                 DCF77_Low_Level.LLP;
		Vscreen:            U8;
		Current_Brightness: Brightness;
	end record;

	type Sequence_Member is record
		Value: U8;
		Mode:  SPI_Display_Mode;
	end record;

	type Sequence is array (Natural range <>) of Sequence_Member;

	-- TODO z highly wasteful but chip is large enough so why not?
	type U32x16 is array (1 .. 16) of U32;
	type U16x8 is array (1 .. 8) of U16;
	type Font_Large is array (Character) of U32x16;
	type Font_Small is array (Character) of U16x8;

	procedure Send_Seq(Ctx: in out Disp; Seq: in Sequence);
	procedure Send_U8(Ctx: in out Disp; Seq: in Sequence_Member);
	procedure Add(Ctx: in out Disp; Item: in Display_Item);
	procedure Set_Address(Ctx: in out Disp; Addr: in U16);
	procedure Write_Zero(Ctx: in out Disp; Addr: in U16; N: in U16);

	------------------------------------------------------------------------
	------------------------------------------------------------------------
	-- FONT DATA FOLLOWS ---------------------------------------------------
	------------------------------------------------------------------------
	------------------------------------------------------------------------

	-- TODO TERMINUS FONT LICENSE ETC
	Font_Large_Data: constant Font_Large := (
		'-' => (16#0#,16#18000#,16#18000#,16#18000#,16#18000#,16#18000#,
			16#18000#,16#18000#,16#18000#,16#18000#,16#18000#,
			16#18000#,16#18000#,16#18000#,16#0#,16#0#),
		'.' => (16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#3c0#,16#3c0#,
			16#3c0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#),
		'/' => (16#0#,16#0#,16#c0#,16#3c0#,16#fc0#,16#3f00#,16#fc00#,
			16#3f000#,16#fc000#,16#3f0000#,16#fc0000#,16#3f00000#,
			16#3c00000#,16#3000000#,16#0#,16#0#),
		'0' => (16#0#,16#ffff00#,16#1ffff80#,16#3ffffc0#,16#38071c0#,
			16#300e0c0#,16#301c0c0#,16#30380c0#,16#30700c0#,
			16#30e00c0#,16#39c01c0#,16#3ffffc0#,16#1ffff80#,
			16#ffff00#,16#0#,16#0#),
		'1' => (16#0#,16#0#,16#0#,16#6000c0#,16#e000c0#,16#1e000c0#,
			16#3ffffc0#,16#3ffffc0#,16#3ffffc0#,16#c0#,16#c0#,
			16#c0#,16#0#,16#0#,16#0#,16#0#),
		'2' => (16#0#,16#f801c0#,16#1f803c0#,16#3f807c0#,16#3800ec0#,
			16#3001cc0#,16#30038c0#,16#30070c0#,16#300e0c0#,
			16#301c0c0#,16#38380c0#,16#3ff00c0#,16#1fe00c0#,
			16#fc00c0#,16#0#,16#0#),
		'3' => (16#0#,16#e00700#,16#1e00780#,16#3e007c0#,16#38181c0#,
			16#30180c0#,16#30180c0#,16#30180c0#,16#30180c0#,
			16#30180c0#,16#383c1c0#,16#3ffffc0#,16#1ffff80#,
			16#fe7f00#,16#0#,16#0#),
		'4' => (16#0#,16#f800#,16#1f800#,16#3f800#,16#71800#,16#e1800#,
			16#1c1800#,16#381800#,16#701800#,16#e01800#,16#1c01800#,
			16#3ffffc0#,16#3ffffc0#,16#3ffffc0#,16#0#,16#0#),
		'5' => (16#0#,16#3ff0300#,16#3ff0380#,16#3ff03c0#,16#30301c0#,
			16#30300c0#,16#30300c0#,16#30300c0#,16#30300c0#,
			16#30300c0#,16#30380c0#,16#303ffc0#,16#301ff80#,
			16#300ff00#,16#0#,16#0#),
		'6' => (16#0#,16#ffff00#,16#1ffff80#,16#3ffffc0#,16#38301c0#,
			16#30300c0#,16#30300c0#,16#30300c0#,16#30300c0#,
			16#30300c0#,16#30381c0#,16#303ffc0#,16#301ff80#,
			16#ff00#,16#0#,16#0#),
		'7' => (16#0#,16#3f00000#,16#3f00000#,16#3f00000#,16#3000000#,
			16#3000000#,16#3001fc0#,16#3007fc0#,16#301ffc0#,
			16#307e000#,16#31f8000#,16#3fe0000#,16#3f80000#,
			16#3e00000#,16#0#,16#0#),
		'8' => (16#0#,16#fe7f00#,16#1ffff80#,16#3ffffc0#,16#383c1c0#,
			16#30180c0#,16#30180c0#,16#30180c0#,16#30180c0#,
			16#30180c0#,16#383c1c0#,16#3ffffc0#,16#1ffff80#,
			16#fe7f00#,16#0#,16#0#),
		'9' => (16#0#,16#ff0000#,16#1ff80c0#,16#3ffc0c0#,16#381c0c0#,
			16#300c0c0#,16#300c0c0#,16#300c0c0#,16#300c0c0#,
			16#300c0c0#,16#380c1c0#,16#3ffffc0#,16#1ffff80#,
			16#ffff00#,16#0#,16#0#),
		':' => (16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#f03c0#,16#f03c0#,
			16#f03c0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#),
		'(' => (16#0#,16#0#,16#0#,16#0#,16#1ff800#,16#7ffe00#,
			16#ffff00#,16#1e00780#,16#38001c0#,16#30000c0#,
			16#2000040#,16#0#,16#0#,16#0#,16#0#,16#0#),
		'!' => (16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#3ffe3c0#,
			16#3ffe3c0#,16#3ffe3c0#,16#0#,16#0#,16#0#,16#0#,16#0#,
			16#0#,16#0#),
		')' => (16#0#,16#0#,16#0#,16#0#,16#2000040#,16#30000c0#,
			16#38001c0#,16#1e00780#,16#ffff00#,16#7ffe00#,
			16#1ff800#,16#0#,16#0#,16#0#,16#0#,16#0#),
		'*' => (16#0#,16#18000#,16#218400#,16#318c00#,16#399c00#,
			16#1db800#,16#ff000#,16#7e000#,16#ff000#,16#1db800#,
			16#399c00#,16#318c00#,16#218400#,16#18000#,16#0#,16#0#),
		'#' => (16#0#,16#181800#,16#181800#,16#3ffffc0#,16#3ffffc0#,
			16#3ffffc0#,16#181800#,16#181800#,16#181800#,
			16#3ffffc0#,16#3ffffc0#,16#3ffffc0#,16#181800#,
			16#181800#,16#0#,16#0#),
		' ' => (16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,
			16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#),
		-- TODO MAKE AN ERROR PATTERN HERE
		others => (others => 0)
	);

	Font_Small_Data: constant Font_Small := (
		' ' => (16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#,16#0#),
		'!' => (16#0#,16#0#,16#0#,16#3fb0#,16#0#,16#0#,16#0#,16#0#),
		'"' => (16#0#,16#0#,16#7000#,16#0#,16#0#,16#7000#,16#0#,16#0#),
		'#' => (16#0#,16#480#,16#3ff0#,16#480#,16#480#,16#3ff0#,16#480#,
			16#0#),
		'$' => (16#e20#,16#1110#,16#1110#,16#7ffc#,16#1110#,16#1110#,
			16#8e0#,16#0#),
		'%' => (16#1000#,16#2830#,16#28c0#,16#1320#,16#c50#,16#3050#,
			16#20#,16#0#),
		'&' => (16#0#,16#1e0#,16#1a10#,16#2610#,16#2510#,16#18e0#,
			16#110#,16#0#),
		''' => (16#0#,16#0#,16#0#,16#7000#,16#0#,16#0#,16#0#,16#0#),
		'(' => (16#0#,16#0#,16#fc0#,16#1020#,16#2010#,16#0#,16#0#,
			16#0#),
		')' => (16#0#,16#0#,16#2010#,16#1020#,16#fc0#,16#0#,16#0#,
			16#0#),
		'*' => (16#0#,16#100#,16#540#,16#380#,16#380#,16#540#,16#100#,
			16#0#),
		'+' => (16#0#,16#100#,16#100#,16#7c0#,16#100#,16#100#,16#0#,
			16#0#),
		',' => (16#0#,16#0#,16#8#,16#30#,16#0#,16#0#,16#0#,16#0#),
		'-' => (16#0#,16#100#,16#100#,16#100#,16#100#,16#100#,16#100#,
			16#0#),
		'.' => (16#0#,16#0#,16#0#,16#30#,16#0#,16#0#,16#0#,16#0#),
		'/' => (16#0#,16#30#,16#c0#,16#300#,16#c00#,16#3000#,16#0#,
			16#0#),
		'0' => (16#0#,16#1fe0#,16#2090#,16#2110#,16#2210#,16#2410#,
			16#1fe0#,16#0#),
		'1' => (16#0#,16#0#,16#810#,16#1010#,16#3ff0#,16#10#,16#10#,
			16#0#),
		'2' => (16#0#,16#1830#,16#2050#,16#2090#,16#2110#,16#2210#,
			16#1c10#,16#0#),
		'3' => (16#0#,16#1860#,16#2010#,16#2210#,16#2210#,16#2210#,
			16#1de0#,16#0#),
		'4' => (16#0#,16#180#,16#280#,16#480#,16#880#,16#1080#,
			16#3ff0#,16#0#),
		'5' => (16#0#,16#3e20#,16#2210#,16#2210#,16#2210#,16#2210#,
			16#21e0#,16#0#),
		'6' => (16#0#,16#fe0#,16#1210#,16#2210#,16#2210#,16#2210#,
			16#1e0#,16#0#),
		'7' => (16#0#,16#2000#,16#2000#,16#2070#,16#2180#,16#2600#,
			16#3800#,16#0#),
		'8' => (16#0#,16#1de0#,16#2210#,16#2210#,16#2210#,16#2210#,
			16#1de0#,16#0#),
		'9' => (16#0#,16#1e00#,16#2110#,16#2110#,16#2110#,16#2120#,
			16#1fc0#,16#0#),
		':' => (16#0#,16#0#,16#0#,16#630#,16#0#,16#0#,16#0#,16#0#),
		';' => (16#0#,16#0#,16#8#,16#630#,16#0#,16#0#,16#0#,16#0#),
		'<' => (16#0#,16#100#,16#280#,16#440#,16#820#,16#1010#,16#0#,
			16#0#),
		'=' => (16#0#,16#480#,16#480#,16#480#,16#480#,16#480#,16#480#,
			16#0#),
		'>' => (16#0#,16#1010#,16#820#,16#440#,16#280#,16#100#,16#0#,
			16#0#),
		'?' => (16#0#,16#1c00#,16#2000#,16#2000#,16#21b0#,16#2200#,
			16#1c00#,16#0#),
		'@' => (16#1fe0#,16#2010#,16#2790#,16#2850#,16#2850#,16#2890#,
			16#1fd0#,16#0#),
		'A' => (16#0#,16#1ff0#,16#2100#,16#2100#,16#2100#,16#2100#,
			16#1ff0#,16#0#),
		'B' => (16#0#,16#3ff0#,16#2210#,16#2210#,16#2210#,16#2210#,
			16#1de0#,16#0#),
		'C' => (16#0#,16#1fe0#,16#2010#,16#2010#,16#2010#,16#2010#,
			16#1860#,16#0#),
		'D' => (16#0#,16#3ff0#,16#2010#,16#2010#,16#2010#,16#1020#,
			16#fc0#,16#0#),
		'E' => (16#0#,16#3ff0#,16#2210#,16#2210#,16#2210#,16#2010#,
			16#2010#,16#0#),
		'F' => (16#0#,16#3ff0#,16#2200#,16#2200#,16#2200#,16#2000#,
			16#2000#,16#0#),
		'G' => (16#0#,16#1fe0#,16#2010#,16#2010#,16#2110#,16#2110#,
			16#19e0#,16#0#),
		'H' => (16#0#,16#3ff0#,16#200#,16#200#,16#200#,16#200#,16#3ff0#,
			16#0#),
		'I' => (16#0#,16#0#,16#2010#,16#3ff0#,16#2010#,16#0#,16#0#,
			16#0#),
		'J' => (16#0#,16#60#,16#10#,16#10#,16#2010#,16#3fe0#,16#2000#,
			16#0#),
		'K' => (16#0#,16#3ff0#,16#300#,16#480#,16#840#,16#1020#,
			16#2010#,16#0#),
		'L' => (16#0#,16#3ff0#,16#10#,16#10#,16#10#,16#10#,16#10#,
			16#0#),
		'M' => (16#3ff0#,16#1000#,16#800#,16#600#,16#800#,16#1000#,
			16#3ff0#,16#0#),
		'N' => (16#0#,16#3ff0#,16#400#,16#200#,16#100#,16#80#,16#3ff0#,
			16#0#),
		'O' => (16#0#,16#1fe0#,16#2010#,16#2010#,16#2010#,16#2010#,
			16#1fe0#,16#0#),
		'P' => (16#0#,16#3ff0#,16#2100#,16#2100#,16#2100#,16#2100#,
			16#1e00#,16#0#),
		'Q' => (16#0#,16#1fe0#,16#2010#,16#2010#,16#2030#,16#2010#,
			16#1fe8#,16#0#),
		'R' => (16#0#,16#3ff0#,16#2100#,16#2180#,16#2140#,16#2120#,
			16#1e10#,16#0#),
		'S' => (16#0#,16#1c60#,16#2210#,16#2210#,16#2210#,16#2210#,
			16#11e0#,16#0#),
		'T' => (16#2000#,16#2000#,16#2000#,16#3ff0#,16#2000#,16#2000#,
			16#2000#,16#0#),
		'U' => (16#0#,16#3fe0#,16#10#,16#10#,16#10#,16#10#,16#3fe0#,
			16#0#),
		'V' => (16#0#,16#3e00#,16#1c0#,16#30#,16#30#,16#1c0#,16#3e00#,
			16#0#),
		'W' => (16#3ff0#,16#20#,16#40#,16#180#,16#40#,16#20#,16#3ff0#,
			16#0#),
		'X' => (16#0#,16#3030#,16#cc0#,16#300#,16#300#,16#cc0#,16#3030#,
			16#0#),
		'Y' => (16#3000#,16#c00#,16#200#,16#1f0#,16#200#,16#c00#,
			16#3000#,16#0#),
		'Z' => (16#0#,16#2070#,16#2090#,16#2110#,16#2210#,16#2410#,
			16#3810#,16#0#),
		'[' => (16#0#,16#0#,16#3ff0#,16#2010#,16#2010#,16#0#,16#0#,
			16#0#),
		'\' => (16#0#,16#3000#,16#c00#,16#300#,16#c0#,16#30#,16#0#,
			16#0#),
		']' => (16#0#,16#0#,16#2010#,16#2010#,16#3ff0#,16#0#,16#0#,
			16#0#),
		'^' => (16#0#,16#1000#,16#2000#,16#4000#,16#2000#,16#1000#,
			16#0#,16#0#),
		'_' => (16#0#,16#4#,16#4#,16#4#,16#4#,16#4#,16#4#,16#0#),
		'`' => (16#0#,16#0#,16#0#,16#8000#,16#4000#,16#0#,16#0#,16#0#),
		'a' => (16#0#,16#e0#,16#510#,16#510#,16#510#,16#510#,16#3f0#,
			16#0#),
		'b' => (16#0#,16#3ff0#,16#410#,16#410#,16#410#,16#410#,16#3e0#,
			16#0#),
		'c' => (16#0#,16#3e0#,16#410#,16#410#,16#410#,16#410#,16#220#,
			16#0#),
		'd' => (16#0#,16#3e0#,16#410#,16#410#,16#410#,16#410#,16#3ff0#,
			16#0#),
		'e' => (16#0#,16#3e0#,16#490#,16#490#,16#490#,16#490#,16#380#,
			16#0#),
		'f' => (16#0#,16#400#,16#400#,16#1ff0#,16#2400#,16#2400#,
			16#2000#,16#0#),
		'g' => (16#0#,16#3e0#,16#412#,16#412#,16#412#,16#412#,16#7fc#,
			16#0#),
		'h' => (16#0#,16#3ff0#,16#400#,16#400#,16#400#,16#400#,16#3f0#,
			16#0#),
		'i' => (16#0#,16#0#,16#410#,16#37f0#,16#10#,16#0#,16#0#,16#0#),
		'j' => (16#0#,16#c#,16#2#,16#2#,16#402#,16#37fc#,16#0#,16#0#),
		'k' => (16#0#,16#3ff0#,16#80#,16#80#,16#140#,16#220#,16#410#,
			16#0#),
		'l' => (16#0#,16#0#,16#2010#,16#3ff0#,16#10#,16#0#,16#0#,16#0#),
		'm' => (16#7f0#,16#400#,16#400#,16#7f0#,16#400#,16#400#,16#3f0#,
			16#0#),
		'n' => (16#0#,16#7f0#,16#400#,16#400#,16#400#,16#400#,16#3f0#,
			16#0#),
		'o' => (16#0#,16#3e0#,16#410#,16#410#,16#410#,16#410#,16#3e0#,
			16#0#),
		'p' => (16#0#,16#7fe#,16#410#,16#410#,16#410#,16#410#,16#3e0#,
			16#0#),
		'q' => (16#0#,16#3e0#,16#410#,16#410#,16#410#,16#410#,16#7fe#,
			16#0#),
		'r' => (16#0#,16#7f0#,16#200#,16#400#,16#400#,16#400#,16#400#,
			16#0#),
		's' => (16#0#,16#310#,16#490#,16#490#,16#490#,16#490#,16#460#,
			16#0#),
		't' => (16#0#,16#400#,16#400#,16#3fe0#,16#410#,16#410#,16#10#,
			16#0#),
		'u' => (16#0#,16#7e0#,16#10#,16#10#,16#10#,16#10#,16#7f0#,
			16#0#),
		'v' => (16#0#,16#700#,16#c0#,16#30#,16#30#,16#c0#,16#700#,
			16#0#),
		'w' => (16#7e0#,16#10#,16#10#,16#1f0#,16#10#,16#10#,16#7e0#,
			16#0#),
		'x' => (16#0#,16#630#,16#140#,16#80#,16#80#,16#140#,16#630#,
			16#0#),
		'y' => (16#0#,16#7e0#,16#12#,16#12#,16#12#,16#12#,16#7fc#,
			16#0#),
		'z' => (16#0#,16#430#,16#450#,16#490#,16#510#,16#610#,16#410#,
			16#0#),
		'{' => (16#0#,16#0#,16#200#,16#1de0#,16#2010#,16#2010#,16#0#,
			16#0#),
		'|' => (16#0#,16#0#,16#0#,16#3ff0#,16#0#,16#0#,16#0#,16#0#),
		'}' => (16#0#,16#0#,16#2010#,16#2010#,16#1de0#,16#200#,16#0#,
			16#0#),
		'~' => (16#180#,16#200#,16#200#,16#100#,16#80#,16#80#,16#300#,
			16#0#),
		-- TODO WHAT ABOUT THE SPECIAL CHARS? -> arraydata.txt
		others => (others => 0)
	);

end DCF77_Display;
